import logging
from typing import Any, List, Mapping, Optional

import requests
import os
from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens

import posixpath

import zhipuai
from zhipuai.utils import jwt_token
from zhipuai.utils.http_client import get, post, stream
from zhipuai.utils.sse_client import SSEClient
####本文件没有被使用，仅仅用来记录 智普AI API 的使用方法####
logger = logging.getLogger(__name__)

class InvokeType:
    SYNC = "invoke"
    ASYNC = "async-invoke"
    SSE = "sse-invoke"
            
class ZPChatGLM(LLM):
    # zhipuai.api_key = "24c517d2ccf8805152dd1cd1cf388df6.QOqxWBFisHU5sXVJ"
    """ZIPU ChatGLM LLM service.

    Example:
        .. code-block:: python

            from langchain.llms import ChatGLM
            endpoint_url = (
                "http://127.0.0.1:8000"
            )
            ChatGLM_llm = ChatGLM(
                endpoint_url=endpoint_url
            )
    """

    endpoint_url: str = "http://127.0.0.1:8000/"
    """Endpoint URL to use."""
    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""
    max_token: int = 20000
    """Max token allowed to pass to the model."""
    temperature: float = 0.9
    """LLM model temperature from 0 to 10."""
    history: List[List] = []
    """History of the conversation"""
    top_p: float = 0.7
    """Top P for nucleus sampling from 0 to 1"""
    with_history: bool = False
    """Whether to use history or not"""

    @property
    def _llm_type(self) -> str:
        return "chat_glm"

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"endpoint_url": self.endpoint_url},
            **{"model_kwargs": _model_kwargs},
        }

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to a ZIPU ChatGLM LLM inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = chatglm_llm("Who are you?")
        """

        _model_kwargs = self.model_kwargs or {}

        # HTTP headers for authorization
        # headers = {"Content-Type": "application/json"}

        payload = {
            "model":"chatglm_pro",
            "prompt": prompt,
            "temperature": self.temperature,
            "history": self.history,
            "max_length": self.max_token,
            "top_p": self.top_p,
        }

        # model="chatglm_lite",
        # prompt=[{"role": "user", "content": "人工智能"}],
        # top_p=0.7,
        # temperature=0.9,

        payload.update(_model_kwargs)
        payload.update(kwargs)

        logger.debug(f"ZIPU ChatGLM payload: {payload}")

        # call api
        try:
            url = self._build_api_url(payload, InvokeType.SYNC)
            response = post(url, self._generate_token(), payload, zhipuai.api_timeout_seconds)
            # url = self._build_api_url(kwargs, InvokeType.SSE)
            # data = stream(url, self._generate_token(), kwargs, zhipuai.api_timeout_seconds)
            # response= SSEClient(data) 
            # logger.debug(f"ZIPU ChatGLM response(in): {response}")
            # response = requests.post(self.endpoint_url, headers=headers, json=payload)
        except requests.exceptions.RequestException as e:
            raise ValueError(f"Error raised by inference endpoint: {e}")

        # logger.debug(f"ZIPU ChatGLM response: {response}")
        if response['code'] != 200:
            raise ValueError(f"Failed with response: {response}")

        try:
            parsed_response = response

            # Check if response content does exists
            if isinstance(parsed_response, dict):
                content_keys = "data"
                # print("data:",parsed_response)
                if content_keys in parsed_response:
                    text = parsed_response[content_keys]['choices'][0]['content']
                else:
                    raise ValueError(f"No content in response : {parsed_response}")
            else:
                raise ValueError(f"Unexpected response type: {parsed_response}")

        except requests.exceptions.JSONDecodeError as e:
            raise ValueError(
                f"Error raised during decoding response from inference endpoint: {e}."
                f"\nResponse: {str(response)}"
            )

        if stop is not None:
            text = enforce_stop_tokens(text, stop)
        if self.with_history:
            self.history = self.history + [[None, parsed_response["response"]]]
        # logger.debug(f"response:{text}")
        # for event in response.events():
        #     if event.event == "add":
        #         print(event.data)
        #     elif event.event == "error" or event.event == "interrupted":
        #         print(event.data)
        #     elif event.event == "finish":
        #         print(event.data)
        #         print(event.meta)
        #     else:
        #         print(event.data)
        text=text.removeprefix('\"').removesuffix('\"')
        text = text.replace('\\"', '"')     # 将反斜杠和引号组合替换为单个引号
        text = text.replace('\\n', '\n')    # 将反斜杠和n组合替换为换行字符
        text = text.replace('\\\\', '\\')   # 将两个连续的反斜杠替换为单个反斜杠
        return text
    @staticmethod
    def _build_api_url(kwargs, *path):
        if kwargs:
            if "model" not in kwargs:
                raise Exception("model param missed")
            model = kwargs.pop("model")
        else:
            model = "-"

        return posixpath.join(zhipuai.model_api_url, model, *path)

    @staticmethod
    def _generate_token():
        if not zhipuai.api_key:
            zhipuai.api_key = os.getenv("ZHIPU_API_KEY")
            
            # logger.debug(f"ZHIPU_API_KEY:{keyV}")
        if not zhipuai.api_key:            
            raise Exception(
                "api_key not provided, you could provide it with `shell: export API_KEY=xxx` or `code: zhipuai.api_key=xxx`"
            )
        return jwt_token.generate_token(zhipuai.api_key)